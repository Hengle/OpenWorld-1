#include "./XHH_GPUDriven_Struct.hlsl"


#pragma kernel CalcIndexOffsetCS

//--------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------
#define THREAD_GROUP_SIZE_X 64

//--------------------------------------------------------------------------------------
// Constant Buffers
//--------------------------------------------------------------------------------------
cbuffer CB
{
    uint _NumOfDrawcalls;//总DC  type * 3

}

//--------------------------------------------------------------------------------------
// Structured Buffers
//--------------------------------------------------------------------------------------
RWStructuredBuffer<uint> _ArgsBuffer;
StructuredBuffer<uint3> _VisibleInfoBuffer;//ID LOD
RWStructuredBuffer<uint> _InsertCountBuffer;//已经插入的个数
RWStructuredBuffer<uint> _OutputDataBuffer;//输出的排序后的buffer
// StructuredBuffer<uint> _IsVisibleBuffer;//可见性信息

[numthreads(THREAD_GROUP_SIZE_X, 1, 1)]
void CalcIndexOffsetCS(in uint3 dispatchThreadID: SV_DispatchThreadID, in uint3 _groupID: SV_GroupID)
{
    uint tID = dispatchThreadID.x;
    uint groupID = _groupID.x;

    if ((tID == 0) * (groupID == 0))
    {
        for (uint k = 1; k < _NumOfDrawcalls; k++)
        {
            //当前的offset=之前的offet+之前的count
            _ArgsBuffer[k * NUMBER_OF_ARGS_PER_DRAW + 4] = _ArgsBuffer[(k - 1) * NUMBER_OF_ARGS_PER_DRAW + 4] + _ArgsBuffer[(k - 1) * NUMBER_OF_ARGS_PER_DRAW + 1];
        }
    }
    
    //开始移动
    int totalCount = 0;
    for (uint i = 0; i < _NumOfDrawcalls; i++)
    {
        totalCount += _ArgsBuffer[ NUMBER_OF_ARGS_PER_DRAW * i + 1];
    }

    if (tID >= totalCount)
        return;

    // int isVisible = _IsVisibleBuffer[tID];
    // if (isVisible > 0)
    uint3 visibleInfo = _VisibleInfoBuffer[tID];
    uint id = visibleInfo.x;
    uint lod = visibleInfo.y;
    uint drawCall = visibleInfo.z;

    uint argsIndex = drawCall * NUMBER_OF_ARGS_PER_INSTANCE_TYPE + lod * NUMBER_OF_ARGS_PER_DRAW + 4;
    uint countIndex = drawCall * NUMBER_OF_LOD + lod;

    uint insertOffset = _ArgsBuffer[argsIndex];
    uint insertedCount;
    InterlockedAdd(_InsertCountBuffer[countIndex], 1, insertedCount);
    _OutputDataBuffer[insertOffset +insertedCount] = id;
}
