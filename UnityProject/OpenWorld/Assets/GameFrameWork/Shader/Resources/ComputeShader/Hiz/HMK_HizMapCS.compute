// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Blit
#pragma kernel Mip
#pragma kernel Cull

//
#include "./HizCommonInput.hlsl"


//keywords
#pragma multi_compile_local __ _REVERSE_Z
#pragma multi_compile_local __ _PING_PONG_COPY


Texture2D<float4> InTex;//输入 深度图
RWTexture2D<float4> MipCopyTex;
RWTexture2D<float4> MipTex;

uniform float2 _SrcTexSize;
uniform float2 _DstTexSize;
uniform uint _Mip;//传入的Mip级别


//=====剔除相关
Texture2D<float4> _HizMap;
RWStructuredBuffer<TerrainObjBounds> _TerrainObjBuffer;//所有视锥剔除之后的代码
uniform float4 _HizMapSize;
uniform float4x4 _HizCameraMatrixVP;
//-----

//将深度图复制到MipTex
[numthreads(8, 8, 1)]
void Blit(uint3 id: SV_DispatchThreadID)
{
    uint2 srcXY = floor(id.xy * _SrcTexSize / _DstTexSize);
    MipTex[id.xy] = InTex[srcXY];
    #if _PING_PONG_COPY
        MipCopyTex[id.xy] = InTex[srcXY];
    #endif
}


//执行深度图 级联压缩
[numthreads(8, 8, 1)]
void Mip(uint3 id: SV_DispatchThreadID)
{
    if (id.x < _DstTexSize.x && id.y < _DstTexSize.y)
    {
        uint2 coord = 2 * id.xy;

        #if _PING_PONG_COPY
            float d1 = InTex[coord].r;
            float d2 = InTex[coord + uint2(1, 0)].r;
            float d3 = InTex[coord + uint2(0, 1)].r;
            float d4 = InTex[coord + uint2(1, 1)].r;
        #else
            float d1 = InTex.mips[_Mip - 1][coord].r;
            float d2 = InTex.mips[_Mip - 1][coord + uint2(1, 0)].r;
            float d3 = InTex.mips[_Mip - 1][coord + uint2(0, 1)].r;
            float d4 = InTex.mips[_Mip - 1][coord + uint2(1, 1)].r;
        #endif

        #if  _REVERSE_Z
            //近大远小
            float d = min(min(d1, d2), min(d3, d4));
        #else
            float d = max(max(d1, d2), max(d3, d4));
        #endif

        MipTex[id.xy] = d;
        #if _PING_PONG_COPY
            MipCopyTex[id.xy] = d;
        #endif
    }
}


//Cull====================================================================================


//将世界坐标转为uv+depth
float3 TransformWorldToUVD(float3 positionWS)
{
    float4 positionHS = mul(_HizCameraMatrixVP, float4(positionWS, 1.0));
    float3 uvd = positionHS.xyz / positionHS.w;
    uvd.xy = (uvd.xy + 1) * 0.5;
    //点可能跑到摄像机背后去，深度会变成负数，需要特殊处理一下
    if (uvd.z < 0)
    {
        #if _REVERSE_Z
            uvd.z = 1;
        #else
            uvd.z = 0;
        #endif
    }
    return uvd;
}

TerrainObjBounds GetBoundsUVD(TerrainObjBounds boundsWS)
{

    TerrainObjBounds boundsUVD;

    float3 boundsMin = boundsWS.minPosition;
    float3 boundsMax = boundsWS.maxPosition;

    float3 p0 = TransformWorldToUVD(boundsMin);
    float3 p1 = TransformWorldToUVD(boundsMax);
    float3 p2 = TransformWorldToUVD(float3(boundsMin.x, boundsMin.y, boundsMax.z));
    float3 p3 = TransformWorldToUVD(float3(boundsMin.x, boundsMax.y, boundsMin.z));
    float3 p4 = TransformWorldToUVD(float3(boundsMin.x, boundsMax.y, boundsMax.z));
    float3 p5 = TransformWorldToUVD(float3(boundsMax.x, boundsMin.y, boundsMax.z));
    float3 p6 = TransformWorldToUVD(float3(boundsMax.x, boundsMax.y, boundsMin.z));
    float3 p7 = TransformWorldToUVD(float3(boundsMax.x, boundsMin.y, boundsMin.z));

    float3 min1 = min(min(p0, p1), min(p2, p3));
    float3 min2 = min(min(p4, p5), min(p6, p7));
    boundsUVD.minPosition = min(min1, min2);

    float3 max1 = max(max(p0, p1), max(p2, p3));
    float3 max2 = max(max(p4, p5), max(p6, p7));
    boundsUVD.maxPosition = max(max1, max2);
    return boundsUVD;
}


uint GetHizMip(TerrainObjBounds boundsUVD)
{
    float3 minP = boundsUVD.minPosition;
    float3 maxP = boundsUVD.maxPosition;
    float2 size = (maxP.xy - minP.xy) * _HizMapSize.x;
    uint2 mip2 = ceil(log2(size));
    uint mip = clamp(max(mip2.x, mip2.y), 1, _HizMapSize.z - 1);
    return mip;
}



float SampleHizMap(float2 uv, float mip, float mipTexSize)
{
    uint2 coord = floor(uv * mipTexSize);
    coord = min(coord, round(mipTexSize) - 1);
    return _HizMap.mips[mip][coord].r;
}


int HizOcclusionCull(TerrainObjBounds obj)
{
    TerrainObjBounds boundsUVD = GetBoundsUVD(obj);
    uint mip = GetHizMip(boundsUVD);

    float3 minP = boundsUVD.minPosition;
    float3 maxP = boundsUVD.maxPosition;


    // //不知道为啥,SampleLevel的mip参数不起效果
    // float d1 = InTex.SampleLevel(_point_clamp_sampler, minP.xy, mip).r;
    // float d2 = InTex.SampleLevel(_point_clamp_sampler, maxP.xy, mip).r;
    // float d3 = InTex.SampleLevel(_point_clamp_sampler, float2(minP.x, maxP.y), mip).r;
    // float d4 = InTex.SampleLevel(_point_clamp_sampler, float2(maxP.x, minP.y), mip).r;

    float mipTexSize = round(_HizMapSize.x / pow(2, mip));
    float d1 = SampleHizMap(minP.xy, mip, mipTexSize);
    float d2 = SampleHizMap(maxP.xy, mip, mipTexSize);
    float d3 = SampleHizMap(float2(minP.x, maxP.y), mip, mipTexSize);
    float d4 = SampleHizMap(float2(maxP.x, minP.y), mip, mipTexSize);

    #if  _REVERSE_Z
        float depth = maxP.z;
        if (d1 > depth && d2 > depth && d3 > depth && d4 > depth)
            return 1;
        else
            return 0;
    #else
        
        float depth = minP.z;
        if (d1 < depth && d2 < depth && d3 < depth && d4 < depth)
            return 1;
        else
            return 0;
    #endif
}

//将传入的所有物体
[numthreads(8, 8, 1)]
void Cull(uint3 gid: SV_GroupID, uint index: SV_GroupIndex)
{
    int oIndex = gid * 64 + index;

    TerrainObjBounds obj = _TerrainObjBuffer[oIndex];
    obj.cullState = HizOcclusionCull(obj);

    _TerrainObjBuffer[oIndex] = obj;
}

